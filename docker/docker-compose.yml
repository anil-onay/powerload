name: 'powerload'
version: '3.9'
services:
  nginx:
    container_name: 'powerload_nginx'
    build:
        context: .
        dockerfile: ./nginx/Dockerfile
    restart: unless-stopped
    ports:
      - 80:80
      # {hostPath}:{imagePath} volumes provide us the way to share data between host and container
    volumes:
      - ../:/var/www
    networks:
      - network
    depends_on:
      - db
      - backend
      - frontend
  db:
    container_name: 'powerload_db'
    build:
      context: .
      dockerfile: mysql.dockerfile
    ports:
      - 3306:3306
    networks:
      - network
  frontend:
    container_name: 'powerload_frontend'
    build:
      context: .
      dockerfile: ../frontend/Dockerfile
    restart: unless-stopped
    ports:
      - 3000:3000
    volumes:
      - ../frontend:/var/www/frontend
    working_dir: /var/www/frontend
    networks:
      - network
  backend:
    container_name: 'powerload_backend'
    build:
      context: .
      dockerfile: ../backend/Dockerfile
    restart: unless-stopped
    ports:
      - 9000:9000
    volumes:
      - ../backend:/var/www/backend
    working_dir: /var/www/backend
    networks:
      - network
    depends_on:
      - db
  composer:
    container_name: 'powerload_composer'
    build:
      context: .
      dockerfile: composer.dockerfile
    volumes:
      - ../backend/:/var/www/backend
    networks:
      - network
  artisan:
    container_name: 'powerload_artisan'
    build:
      context: .
      dockerfile: ../backend/Dockerfile
    volumes:
      - ../backend:/var/www/backend
    working_dir: /var/www/backend
    depends_on:
      - db
    entrypoint: [ 'php', '/var/www/backend/artisan' ]
    networks:
      - network
  npm:
    container_name: 'powerload_npm'
    build:
      context: .
      dockerfile: ../frontend/Dockerfile
    volumes:
      - ../frontend:/var/www/frontend
    working_dir: /var/www/frontend
    entrypoint: [ 'npm']
    networks:
      - network
networks:
  network:
    driver: bridge